<?php

namespace BW\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Request;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository {
    
    public function findNestedBy($left, $right) {
        $request = Request::createFromGlobals();
        
        $qb = $this->createQueryBuilder('p')
            ->innerJoin('p.category', 'c')
            ->innerJoin('p.route', 'r')
            ->innerJoin('p.lang', 'l')
            ->where('p.published = 1')
            ->andWhere('c.published = 1')
            ->andWhere('c.left >= :left')
            ->andWhere('c.left <= :right')
            ->setParameter('left', $left)
            ->setParameter('right', $right)
            ->orderBy('p.created', 'DESC')
        ;
        
        /* Custom Filter */
        $form = $request->query->get('form', FALSE);
        if ($form) {
            if (isset($form['apply'])) {
                unset($form['apply']); // unset submit button from form data array if exists
            }

            /* Generate property array */
            $properties = array();
            foreach ($form as $property) {
                if (is_array($property)) {
                    foreach ($property as $prop) {
                        $prop = (int)$prop;
                        if ($prop) {
                            $properties[] = $prop;
                        }
                    }
                } elseif (is_scalar($property)) {
                    $property = (int)$property;
                    if ($property) {
                        $properties[] = $property;
                    }
                } else {
                    throw new \InvalidArgumentException('Filter expects an array or a scalar value');
                }
            }

            if ($properties) {
                $qb = $qb
                    ->innerJoin('p.postCustomFields', 'pcf')
                    ->innerJoin('pcf.customFieldProperties', 'cfp')
                    ->andWhere('cfp.id IN (:properties)')
                    ->groupBy('p.id')
                    ->having('COUNT(p.id) = :count')
                    ->setParameter('properties', $properties)
                    ->setParameter('count', count($form)) // Count affected custom fields
                ;
            }
        }
        /* /Custom Filter */
        
        return $qb->getQuery()->getResult();
    }
    
}
